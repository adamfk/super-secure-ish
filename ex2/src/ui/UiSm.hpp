// Autogenerated with StateSmith 0.18.2+6062baabb038910ff3841c3cd5938115c0ed0a03.
// Algorithm: Balanced2. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

#pragma once  // You can also specify normal include guard. See https://github.com/StateSmith/StateSmith/blob/main/docs/settings.md
#include <stdint.h>
#include "../audio/Audio.hpp"
#include "../control/Controller.hpp"
#include "Display.hpp"
#include <stdint.h>


// Generated state machine
class UiSm
{
public:
    enum class EventId: uint8_t
    {
        ANY_KEY = 0,
        BACK_PRESS = 1,
        DOWN_PRESS = 2,
        ENTER_PRESS = 3,
        TIMEOUT = 4,
        UP_PRESS = 5,
    };
    
    enum
    {
        EventIdCount = 6
    };
    
    enum class StateId: uint8_t
    {
        ROOT = 0,
        HOME = 1,
        MENU = 2,
        ARM_SYSTEM = 3,
        DISARM_SYSTEM = 4,
        SPLASH_SCREEN = 5,
    };
    
    enum
    {
        StateIdCount = 6
    };
    
    // Used internally by state machine. Feel free to inspect, but don't modify.
    StateId stateId;
    
    // State machine variables. Can be used for inputs, outputs, user variables...
    class Vars
    {
    public:
        Display* lcd;      // pointer because StateSmith doesn't support references (yet!)
        Controller* ctrl;  // pointer because StateSmith doesn't support references (yet!)
        Audio* audio;      // pointer because StateSmith doesn't support references (yet!)
        int32_t timeout_ms; // Must be > 16 bits to allow for 60+ seconds.
    };
    
    // Variables. Can be used for inputs, outputs, user variables...
    Vars vars {};
    
    // State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
    UiSm()
    {
    }
    
    // Starts the state machine. Must be called before dispatching events. Not thread safe.
    void start();
    
    // Dispatches an event to the state machine. Not thread safe.
    // Note! This function assumes that the `eventId` parameter is valid.
    void dispatchEvent(EventId eventId);
    
    // Thread safe.
    static char const * stateIdToString(StateId id);
    
    // Thread safe.
    static char const * eventIdToString(EventId id);


// ################################### PRIVATE MEMBERS ###################################
private:
    
    // This function is used when StateSmith doesn't know what the active leaf state is at
    // compile time due to sub states or when multiple states need to be exited.
    void exitUpToStateHandler(StateId desiredState);
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    void ROOT_enter();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state HOME
    ////////////////////////////////////////////////////////////////////////////////
    
    void HOME_enter();
    
    void HOME_exit();
    
    void HOME_enter_press();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state MENU
    ////////////////////////////////////////////////////////////////////////////////
    
    void MENU_enter();
    
    void MENU_exit();
    
    void MENU_any_key();
    
    void MENU_back_press();
    
    void MENU_timeout();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ARM_SYSTEM
    ////////////////////////////////////////////////////////////////////////////////
    
    void ARM_SYSTEM_enter();
    
    void ARM_SYSTEM_exit();
    
    void ARM_SYSTEM_enter_press();
    
    void ARM_SYSTEM_up_press();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state DISARM_SYSTEM
    ////////////////////////////////////////////////////////////////////////////////
    
    void DISARM_SYSTEM_enter();
    
    void DISARM_SYSTEM_exit();
    
    void DISARM_SYSTEM_down_press();
    
    void DISARM_SYSTEM_enter_press();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state SPLASH_SCREEN
    ////////////////////////////////////////////////////////////////////////////////
    
    void SPLASH_SCREEN_enter();
    
    void SPLASH_SCREEN_exit();
    
    void SPLASH_SCREEN_timeout();
};
