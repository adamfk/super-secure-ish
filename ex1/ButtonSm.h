// Autogenerated with StateSmith 0.18.2+6062baabb038910ff3841c3cd5938115c0ed0a03.
// Algorithm: Balanced2. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

#pragma once  // You can also specify normal include guard. See https://github.com/StateSmith/StateSmith/blob/main/docs/settings.md
#include <stdint.h>
#include <stdint.h> // for fixed width integer state machine variables below



#ifdef __cplusplus
extern "C" {
#endif

typedef enum __attribute__((packed)) ButtonSm_EventId
{
    ButtonSm_EventId_DO = 0 // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
} ButtonSm_EventId;

enum
{
    ButtonSm_EventIdCount = 1
};

typedef enum __attribute__((packed)) ButtonSm_StateId
{
    ButtonSm_StateId_ROOT = 0,
    ButtonSm_StateId_PRESSED_DEBOUNCE = 1,
    ButtonSm_StateId_PRESSED_STABLE = 2,
    ButtonSm_StateId_CONFIRM_LONG = 3,
    ButtonSm_StateId_PRESSED_LONG = 4,
    ButtonSm_StateId_RELEASED_DEBOUNCE = 5,
    ButtonSm_StateId_RELEASED_STABLE = 6
} ButtonSm_StateId;

enum
{
    ButtonSm_StateIdCount = 7
};


// Generated state machine
// forward declaration
typedef struct ButtonSm ButtonSm;

// State machine variables. Can be used for inputs, outputs, user variables...
typedef struct ButtonSm_Vars
{
    // ----- INPUT/OUTPUT VARIABLES -----
    // You **ADD** your loop delta time (ms since last loop) to this variable so it can be used for timing.
    uint16_t timer_ms;
    
    // ----- INPUT VARIABLES -----
    // You **SET** this to 1 when button is detected as active, and 0 when inactive.
    uint8_t input_active: 1;
    
    // ----- OUTPUT EVENT VARIABLES -----
    // You **READ** and **CLEAR** event flags in using code.
    uint8_t release_event: 1;
    uint8_t press_event: 1;
    uint8_t long_event: 1;
    
    // ----- OUTPUT STATUS VARIABLES -----
    // You **READ** these flags in using code, but don't clear them.
    uint8_t press_status: 1;
    uint8_t long_status: 1;
} ButtonSm_Vars;


// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
void ButtonSm_ctor(ButtonSm* sm);

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void ButtonSm_start(ButtonSm* sm);

// Dispatches an event to the state machine. Not thread safe.
// Note! This function assumes that the `event_id` parameter is valid.
void ButtonSm_dispatch_event(ButtonSm* sm, ButtonSm_EventId event_id);

// Thread safe.
char const * ButtonSm_state_id_to_string(ButtonSm_StateId id);

// Thread safe.
char const * ButtonSm_event_id_to_string(ButtonSm_EventId id);

// Generated state machine
struct ButtonSm
{
    // Used internally by state machine. Feel free to inspect, but don't modify.
    ButtonSm_StateId state_id;
    
    // Variables. Can be used for inputs, outputs, user variables...
    ButtonSm_Vars vars;
};


#ifdef __cplusplus
}  // extern "C"
#endif

