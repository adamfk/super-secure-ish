// Autogenerated with StateSmith 0.18.2+6062baabb038910ff3841c3cd5938115c0ed0a03.
// Algorithm: Balanced2. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

#pragma once  // You can also specify normal include guard. See https://github.com/StateSmith/StateSmith/blob/main/docs/settings.md
#include <stdint.h>
#include "../audio/Audio.hpp"
#include "../control/Controller.hpp"
#include <stdint.h>

// forward declare Display because of circular references. We store a pointer to it in the FSM variables section.
class Display;


// Generated state machine
class UiSm
{
public:
    enum class EventId: uint8_t
    {
        ANY_KEY = 0,
        BACK_HELD = 1,
        BACK_PRESS = 2,
        DOWN_PRESS = 3,
        ENTER_PRESS = 4,
        LCD_UPDATE = 5,
        PANIC_BUTTON = 6,
        REFRESH = 7,
        TIMEOUT = 8,
        UP_DOWN_HELD = 9,
        UP_PRESS = 10,
    };
    
    enum
    {
        EventIdCount = 11
    };
    
    enum class StateId: uint8_t
    {
        ROOT = 0,
        HOME = 1,
        MENU = 2,
        ARM_SYSTEM = 3,
        CONFIG = 4,
        ALARM_DELAY = 5,
        ARMING_DELAY = 6,
        CHANGE_CODE = 7,
        CONFIG__ALARM_DELAY = 8,
        CONFIG__ARMING_DELAY = 9,
        CONFIG__CHANGE_CODE = 10,
        SECRET_MENU = 11,
        DATA = 12,
        SENSOR = 13,
        UPTIME = 14,
        DISARM_SYSTEM = 15,
        MENU__ARM_SYSTEM = 16,
        MENU__CONFIG = 17,
        MENU__DATA = 18,
        MENU__DISARM_SYSTEM = 19,
        PANIC = 20,
        SPLASH_SCREEN = 21,
    };
    
    enum
    {
        StateIdCount = 22
    };
    
    // Used internally by state machine. Feel free to inspect, but don't modify.
    StateId stateId;
    
    // State machine variables. Can be used for inputs, outputs, user variables...
    class Vars
    {
    public:
        Display* lcd;      // pointer because StateSmith doesn't support references (yet!)
        Controller* ctrl;  // pointer because StateSmith doesn't support references (yet!)
        Audio* audio;      // pointer because StateSmith doesn't support references (yet!)
        int32_t timeout_ms; // Must be > 16 bits to allow for 60+ seconds.
        EventId event_id; // Optional. Manually set before dispatching event.
    };
    
    // Variables. Can be used for inputs, outputs, user variables...
    Vars vars {};
    
    // State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
    UiSm()
    {
    }
    
    // Starts the state machine. Must be called before dispatching events. Not thread safe.
    void start();
    
    // Dispatches an event to the state machine. Not thread safe.
    // Note! This function assumes that the `eventId` parameter is valid.
    void dispatchEvent(EventId eventId);
    
    // Thread safe.
    static char const * stateIdToString(StateId id);
    
    // Thread safe.
    static char const * eventIdToString(EventId id);

private:
    static const int32_t DATA_TIMEOUT_MS = 60 * 1000L; // C99 transpiler doesn't support 'ClassCode' section.



// ################################### PRIVATE MEMBERS ###################################
private:
    
    // This function is used when StateSmith doesn't know what the active leaf state is at
    // compile time due to sub states or when multiple states need to be exited.
    void exitUpToStateHandler(StateId desiredState);
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    void ROOT_enter();
    
    void ROOT_panic_button();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state HOME
    ////////////////////////////////////////////////////////////////////////////////
    
    void HOME_enter();
    
    void HOME_exit();
    
    void HOME_enter_press();
    
    void HOME_lcd_update();
    
    void HOME_refresh();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state MENU
    ////////////////////////////////////////////////////////////////////////////////
    
    void MENU_enter();
    
    void MENU_exit();
    
    void MENU_any_key();
    
    void MENU_back_held();
    
    void MENU_back_press();
    
    void MENU_timeout();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ARM_SYSTEM
    ////////////////////////////////////////////////////////////////////////////////
    
    void ARM_SYSTEM_enter();
    
    void ARM_SYSTEM_exit();
    
    void ARM_SYSTEM_back_press();
    
    void ARM_SYSTEM_enter_press();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state CONFIG
    ////////////////////////////////////////////////////////////////////////////////
    
    void CONFIG_enter();
    
    void CONFIG_exit();
    
    void CONFIG_back_press();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ALARM_DELAY
    ////////////////////////////////////////////////////////////////////////////////
    
    void ALARM_DELAY_enter();
    
    void ALARM_DELAY_exit();
    
    void ALARM_DELAY_back_press();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ARMING_DELAY
    ////////////////////////////////////////////////////////////////////////////////
    
    void ARMING_DELAY_enter();
    
    void ARMING_DELAY_exit();
    
    void ARMING_DELAY_back_press();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state CHANGE_CODE
    ////////////////////////////////////////////////////////////////////////////////
    
    void CHANGE_CODE_enter();
    
    void CHANGE_CODE_exit();
    
    void CHANGE_CODE_back_press();
    
    void CHANGE_CODE_up_down_held();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state CONFIG__ALARM_DELAY
    ////////////////////////////////////////////////////////////////////////////////
    
    void CONFIG__ALARM_DELAY_enter();
    
    void CONFIG__ALARM_DELAY_exit();
    
    void CONFIG__ALARM_DELAY_enter_press();
    
    void CONFIG__ALARM_DELAY_up_press();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state CONFIG__ARMING_DELAY
    ////////////////////////////////////////////////////////////////////////////////
    
    void CONFIG__ARMING_DELAY_enter();
    
    void CONFIG__ARMING_DELAY_exit();
    
    void CONFIG__ARMING_DELAY_down_press();
    
    void CONFIG__ARMING_DELAY_enter_press();
    
    void CONFIG__ARMING_DELAY_up_press();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state CONFIG__CHANGE_CODE
    ////////////////////////////////////////////////////////////////////////////////
    
    void CONFIG__CHANGE_CODE_enter();
    
    void CONFIG__CHANGE_CODE_exit();
    
    void CONFIG__CHANGE_CODE_down_press();
    
    void CONFIG__CHANGE_CODE_enter_press();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state SECRET_MENU
    ////////////////////////////////////////////////////////////////////////////////
    
    void SECRET_MENU_enter();
    
    void SECRET_MENU_exit();
    
    void SECRET_MENU_back_press();
    
    void SECRET_MENU_down_press();
    
    void SECRET_MENU_enter_press();
    
    void SECRET_MENU_lcd_update();
    
    void SECRET_MENU_up_press();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state DATA
    ////////////////////////////////////////////////////////////////////////////////
    
    void DATA_enter();
    
    void DATA_exit();
    
    void DATA_any_key();
    
    void DATA_back_press();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state SENSOR
    ////////////////////////////////////////////////////////////////////////////////
    
    void SENSOR_enter();
    
    void SENSOR_exit();
    
    void SENSOR_lcd_update();
    
    void SENSOR_up_press();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state UPTIME
    ////////////////////////////////////////////////////////////////////////////////
    
    void UPTIME_enter();
    
    void UPTIME_exit();
    
    void UPTIME_down_press();
    
    void UPTIME_lcd_update();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state DISARM_SYSTEM
    ////////////////////////////////////////////////////////////////////////////////
    
    void DISARM_SYSTEM_enter();
    
    void DISARM_SYSTEM_exit();
    
    void DISARM_SYSTEM_back_press();
    
    void DISARM_SYSTEM_enter_press();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state MENU__ARM_SYSTEM
    ////////////////////////////////////////////////////////////////////////////////
    
    void MENU__ARM_SYSTEM_enter();
    
    void MENU__ARM_SYSTEM_exit();
    
    void MENU__ARM_SYSTEM_down_press();
    
    void MENU__ARM_SYSTEM_enter_press();
    
    void MENU__ARM_SYSTEM_up_press();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state MENU__CONFIG
    ////////////////////////////////////////////////////////////////////////////////
    
    void MENU__CONFIG_enter();
    
    void MENU__CONFIG_exit();
    
    void MENU__CONFIG_down_press();
    
    void MENU__CONFIG_enter_press();
    
    void MENU__CONFIG_up_press();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state MENU__DATA
    ////////////////////////////////////////////////////////////////////////////////
    
    void MENU__DATA_enter();
    
    void MENU__DATA_exit();
    
    void MENU__DATA_enter_press();
    
    void MENU__DATA_up_press();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state MENU__DISARM_SYSTEM
    ////////////////////////////////////////////////////////////////////////////////
    
    void MENU__DISARM_SYSTEM_enter();
    
    void MENU__DISARM_SYSTEM_exit();
    
    void MENU__DISARM_SYSTEM_down_press();
    
    void MENU__DISARM_SYSTEM_enter_press();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state PANIC
    ////////////////////////////////////////////////////////////////////////////////
    
    void PANIC_enter();
    
    void PANIC_exit();
    
    void PANIC_timeout();
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state SPLASH_SCREEN
    ////////////////////////////////////////////////////////////////////////////////
    
    void SPLASH_SCREEN_enter();
    
    void SPLASH_SCREEN_exit();
    
    void SPLASH_SCREEN_timeout();
};
